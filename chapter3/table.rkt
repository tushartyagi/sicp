#lang sicp

; Each table is just a list of nodes of (key, value) and next-pointer
(define (create-table)
  (define table '())
  (define (update-table k v) (update k v table))
  (define (update k v table)
    (cond ((null? table) false)
          ((eq? (get-key (car table)) k)
           (set-car! table (new-node k v))
           true)
          (else (update k v (cdr table)))))
  (define (get-key node)
    (car node))
  (define (update-value v node)
    (set-cdr! node v)) 
  (define (insert k v)
    (set! table (cons (new-node k v) table)))
  (define (new-node k v)
    (cons k v))
  (define (dispatch operation)
    (cond ((eq? operation 'update)
           update-table) 
          ((eq? operation 'insert)
           insert)
          ((eq? operation 'show)
           table)))
  dispatch)

(define t (create-table))
(define insert (lambda (table k v) ((table 'insert) k v)))
(define update (lambda (table k v) ((table 'update) k v)))
(define show  (lambda (table) (table 'show)))

(insert t 1 13)
(insert t 2 43)
(insert t 12 13)
